name: Create Draft Release with Auto-Generated Notes

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Select the version type to increment (major, minor, patch)"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      release_title:
        description: "Enter the title of the release"
        required: true
        type: string
      acknowledge_draft:
        description: "I understand that I must re-edit and finalize the draft release (Yes/No)"
        required: true
        type: choice
        options:
          - No
          - Yes

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Acknowledgement
        if: ${{ github.event.inputs.acknowledge_draft != 'Yes' }}
        run: |
          echo "You must select 'Yes' to acknowledge your responsibility for finalizing the draft release."
          exit 1
      - name: Validate title (no empty)
        if: ${{ github.event.inputs.release_title == '' }}
        run: |
          echo "You must enter a title for the release."
          exit 1

  create-draft-release:
    runs-on: ubuntu-latest
    needs: validate-input

    steps:
      - name: Fetch Latest Release
        id: get-latest-release
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).catch(() => null);

            if (latestRelease) {
              core.setOutput('latest_tag', latestRelease.data.tag_name);
            } else {
              core.setOutput('latest_tag', 'v0.0.0'); // Default for first release
            }

      - name: Calculate New Version
        id: calculate-version
        run: |
          latest_version="${{ steps.get-latest-release.outputs.latest_tag }}"
          version_type="${{ github.event.inputs.version_type }}"

          major=$(echo $latest_version | cut -d. -f1 | sed 's/^v//')
          minor=$(echo $latest_version | cut -d. -f2)
          patch=$(echo $latest_version | cut -d. -f3)

          if [[ $version_type == "major" ]]; then
            new_version="v$((major + 1)).0.0"
          elif [[ $version_type == "minor" ]]; then
            new_version="v$major.$((minor + 1)).0"
          else
            new_version="v$major.$minor.$((patch + 1))"
          fi

          echo "::set-output name=new_version::$new_version"

      - name: Create New Tag
        run: |
          git tag ${{ steps.calculate-version.outputs.new_version }}
          git push origin ${{ steps.calculate-version.outputs.new_version }}

      - name: Generate Release Notes
        id: generate-release-notes
        uses: actions/github-script@v6
        with:
          script: |
            const releaseNotes = await github.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.calculate-version.outputs.new_version }}",
              target_commitish: 'main',
            });
            core.setOutput("release_body", releaseNotes.body);

      - name: Create Draft Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.calculate-version.outputs.new_version }}
          release_name: "${{ steps.calculate-version.outputs.new_version }} ${{ github.event.inputs.release_title }}"
          body: ${{ steps.generate-release-notes.outputs.release_body }}
          draft: true
